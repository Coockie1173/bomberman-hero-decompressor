// lzhuf decoder
// https://people.cs.umu.se/isak/Snippets/lzhuf.c

const lzhuf = {};
if(typeof module != 'undefined') module.exports = lzhuf;

(function(lzhuf){

lzhuf.decode = decode;
lzhuf.numBytesRead = 0;

const BUFSIZE = 0x1000;
const BUFMASK = (BUFSIZE - 1);
const THRESHOLD = 2;
const F = 0x3C;
const N_CHAR = (0x100 - THRESHOLD + F);
const T = (N_CHAR * 2 - 1);
const ROOT = (T - 1);
const MAX_FREQ = 0x8000;

var accBits = 0;
var numAccBits = 0;
var src = null;
var dst = null;
var srcOffset = 0;
var dstOffset = 0;

const freq = new Uint16Array(T + 1);
const prnt = new Uint16Array(T + N_CHAR);
const son = new Uint16Array(T);
const windowBuf = new Uint8Array(BUFSIZE);

const D_CODE = new Uint8Array([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
    0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F,
    0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
    0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
    0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1B, 0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1E, 0x1F, 0x1F,
    0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23, 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27,
    0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x2F, 0x2F,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
]);

const D_LEN = new Uint8Array([
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
]);

function decode(_src, _dst, dstSize)
{
    init();

    src = _src;
    dst = _dst;

    while(dstOffset < dstSize)
    {
        var index = son[ROOT];

        while(index < T)
        {
            index = son[index + readBits(1)];
        }

        update(index);

        var c = index - T;

        if(c < 0x100)
        {
            // write single byte to window and dst
            var byte = c & 0xFF;
            dst.setUint8(dstOffset++, byte);
            windowBuf[windowWriteOffset] = byte;
            windowWriteOffset = (windowWriteOffset + 1) & BUFMASK;
        }
        else
        {
            // copy multiple bytes from window to dst
            var byteLength = c - 0xFD;
            var offsetIndex = readBits(8);
            var fineOffset = offsetIndex;

            var numFineOffsetBits = D_LEN[offsetIndex] - 2;
            var coarseOffset = D_CODE[offsetIndex] << 6;

            while(numFineOffsetBits--)
            {
                fineOffset = (fineOffset << 1) | readBits(1);
            }

            var windowReadPos = ((windowWriteOffset - (coarseOffset | (fineOffset & 0x3F))) - 1) & 0xFFF;

            while(byteLength--)
            {
                var byte = windowBuf[windowReadPos];
                windowBuf[windowWriteOffset] = byte;
                dst.setUint8(dstOffset++, byte);

                windowReadPos = (windowReadPos + 1) & 0xFFF;
                windowWriteOffset = (windowWriteOffset + 1) & 0xFFF;
            }
        }
    }

    lzhuf.numBytesRead = srcOffset;
}

function init()
{
    accBits = 0;
    numAccBits = 0;

    src = null;
    dst = null;
    srcOffset = 0;
    dstOffset = 0;
    windowWriteOffset = 0;

    for(var i = 0; i < BUFSIZE; i++)
    {
        windowBuf[i] = 0;
    }

    for(var i = 0; i < N_CHAR; i++)
    {
        freq[i] = 1;
        son[i] = T + i;
        prnt[T + i] = i;
    }

    var j = 0;
    for(var i = N_CHAR; i < T; i++)
    {
        freq[i] = freq[j] + freq[j + 1];
        son[i] = j;
        prnt[j] = i;
        prnt[j + 1] = i;
        j += 2;
    }
    
    freq[T] = 0xFFFF;
    prnt[ROOT] = 0;
}

function readBits(numBits)
{
    while(numAccBits <= 8)
    {
        var byte = src.getUint8(srcOffset++);
        accBits |= (byte << (8 - numAccBits));
        numAccBits += 8;
    }

    accBits &= 0xFFFF;

    var val = accBits >> (16 - numBits);
    accBits <<= numBits;
    numAccBits -= numBits;
    return val;
}

function update(index)
{
    if(freq[ROOT] == MAX_FREQ)
    {
        reconstructTree();
    }

    var c = prnt[index];

    do {
        freq[c]++;

        if(freq[c + 1] < freq[c])
        {
            var l = c + 1;
            while(freq[l] < freq[c])
            {
                l++;
            }
            l--;

            var s = freq[c];
            freq[c] = freq[l];
            freq[l] = s;

            prnt[son[c]] = l;

            if(son[c] < T)
            {
                prnt[son[c] + 1] = l;
            }

            var t = son[l];
            son[l] = son[c];
            son[c] = t;
            prnt[t] = c;

            if(t < T)
            {
                prnt[t + 1] = c;
            }

            c = l;
        }
        c = prnt[c];
    } while(c != 0);
}

function reconstructTree()
{
    var j = 0;
    for(var i = 0; i < T; i++)
    {
        if(son[i] >= T)
        {
            freq[j] = (freq[i]+1) >> 1;
            son[j] = son[i];
            j++;
        }
    }

    j = 0;
    for(var i = N_CHAR; i < T; i++)
    {
        freq[i] = freq[j+0] + freq[j+1];
        var t = freq[i];

        var k = (i - 1);
        while(freq[k] > freq[i])
        {
            k--;
        }
        k++;

        var count = (i - k);
        arrmove(freq, k+1, freq, k+0, count);
        freq[k] = t;
        arrmove(son, k+1, son, k+0, count);
        son[k] = j;
        j += 2;
    }

    for(var i = 0; i < T; i++)
    {
        if(son[i] >= T)
        {
            prnt[son[i]] = i;
        }
        else
        {
            prnt[son[i]+1] = i;
            prnt[son[i]+0] = i;
        }
    }
}

function arrmove(arr0, offs0, arr1, offs1, count)
{
    offs0 += count - 1;
    offs1 += count - 1;

    while(count--)
    {
        arr0[offs0--] = arr1[offs1--];
    }
}

return self;

})(lzhuf);